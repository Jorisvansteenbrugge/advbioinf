#!/usr/bin/python3.5

__author__ = "Joris van Steenbrugge"

from glob import glob
from assemblers.BaseAssembler import BaseAssembler
from os import path
import Metrics
import argparse

def getArguments():
    p = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    
    subparsers = p.add_subparsers(dest = "command", help = "Sub-commands for the pipeline suite")
    subparsers.required = True

    # Assembly sub command
    assembly_parser = subparsers.add_parser("assembly", help="De novo assembly")
    assembly_parser.set_defaults(func=assembly)
    assembly_parser.add_argument("-i", dest = "input", required = True, nargs = "+", help="Input file(s)")
    assembly_parser.add_argument("-p", dest = "program", required = False, type = int,  default = 1, 
            help="Alignment program: (default: 1) \n\t"+
                    "1: Velvet \n\t" + 
                    "2: wgs-assembler (*) \n\t" +
                    "3: soapdenovo \n\t" + 
                    "4: abyss (*) \n\t" +
                    "(*) Currently not supported")
    assembly_parser.add_argument("-type", dest = "readType", required = False, default="paired",
            help="Type of the reads, unpaired/paired (default: paired)")
    assembly_parser.add_argument("-o", dest = "outdir", required = True, help = "Directory for output files")

    # Annotate sub command
    annotate_parser = subparsers.add_parser("annotate", help = "Annotate a sequence")
    annotate_parser.add_argument("-i", dest = "input", help = "Fasta file containing (contig) sequences")

    # Metrics sub command
    metrics_parser = subparsers.add_parser("metrics", help = "Calculate differnt metrics")
    metrics_parser.set_defaults(func=calcMetrics)
    metrics_parser.add_argument("-d", dest = "directory", 
            help = "Path to a directory with contif files in fasta format")
    
    return p.parse_args()




def calcMetrics(directory):
    for contigFile in glob(directory + "/*"):
        n50 = Metrics.getNMetric(contigFile, 50)
        print("{} N50: {}".format(path.basename(contigFile.split(".")[0]), str(n50)))

def assembly(arguments):
    assembler = BaseAssembler(arguments.program, arguments.readType, arguments.input, arguments.outdir)
    assembler.assemble()
    assembler.cleanUp()


if __name__ == "__main__":
    arguments = getArguments()
    arguments.func(arguments)
