#!/usr/bin/env python
"""
Parses the CRB output file and filters those (duplicate) entries
out of the original fasta file
"""
__author__ = "Joris van Steenbrugge"
__date__ = "03/12/2016"

import argparse
from Bio import SeqIO

def parseArgs():
    """Parses command line arguments using flags

        Returns:
            parser.parse_args -- Arguments object containing 
                                 the entered arguments.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--crbOut", dest="crbOut", required = True,
                        help = "Output tsv file from the crb-blast program")
    parser.add_argument("-i", dest="fastaInput", required = True,
                        help = "Input fasta file to be filtered")
    parser.add_argument("-o", dest="output", required = True,
                        help = "Output fasta file")
    return parser.parse_args()

def filterOutList(crbOut):
    with open(crbOut) as in_file:
        headers_to_remove = [line.strip().split()[0] for line in in_file]
    return headers_to_remove

def filterFasta(fasta_file, headers_to_remove):
    handle = open(fasta_file, "rU")
    for record in SeqIO.parse(handle, "fasta"):
        if record.id not in headers_to_remove:
            yield ">{}\n{}\n".format(record.id, record.seq)
    handle.close()

def outPut(outLines, outfile):
    with open(outfile, "w") as output_file:
        [output_file.write(x) for x in outLines]    

if __name__ == "__main__":
    args = parseArgs()
    headers_to_remove =  filterOutList(args.crbOut)
    outLines = filterFasta(args.fastaInput, headers_to_remove)
    outPut(outLines, args.output)
